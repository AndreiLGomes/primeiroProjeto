// controllers/userController.js
import {
    encontrarPorNome,
    listarTodos,
    criarUsuario,
    atualizarUsuario,
    deletarUsuario
} from '../models/userModel.js';

// üîç Buscar usu√°rio por nome (GET /usuarios-bd?nome=...)
export const buscarUsuarioPorNome = async (req, res) => {
    const { nome } = req.query;

    if (!nome) {
        return res.status(400).json({ erro: 'Par√¢metro "nome" √© obrigat√≥rio.' });
    }

    try {
        const rows = await encontrarPorNome(nome);

        if (rows.length === 0) {
            return res.status(404).json({ mensagem: 'Usu√°rio n√£o encontrado.' });
        }

        res.status(200).json(rows);
    } catch (error) {
        console.error('Erro ao buscar usu√°rio por nome:', error.message);
        res.status(500).json({ erro: 'Erro interno ao consultar o banco de dados.' });
    }
};

// üìÑ Listar todos os usu√°rios (GET /usuarios-bd/todos)
export const listarUsuarios = async (req, res) => {
    try {
        const usuarios = await listarTodos();
        res.status(200).json(usuarios);
    } catch (error) {
        console.error('Erro ao listar usu√°rios:', error.message);
        res.status(500).json({ erro: 'Erro interno ao consultar o banco de dados.' });
    }
};

// ‚ûï Criar usu√°rio (POST /usuarios-bd)
export const criarNovoUsuario = async (req, res) => {
    const { nome, email } = req.body;

    if (!nome || !email) {
        return res.status(400).json({ erro: 'Nome e email s√£o obrigat√≥rios.' });
    }

    try {
        const novoId = await criarUsuario({ nome, email });
        res.status(201).json({ mensagem: 'Usu√°rio criado com sucesso!', id: novoId });
    } catch (error) {
        console.error('Erro ao criar usu√°rio:', error.message);
        res.status(500).json({ erro: 'Erro ao criar usu√°rio.' });
    }
};

// ‚úèÔ∏è Atualizar usu√°rio (PUT /usuarios-bd/:id)
export const atualizarDadosUsuario = async (req, res) => {
    const { id } = req.params;
    const { nome, email } = req.body;

    if (!nome || !email) {
        return res.status(400).json({ erro: 'Nome e email s√£o obrigat√≥rios.' });
    }

    try {
        const alterados = await atualizarUsuario(id, { nome, email });

        if (alterados === 0) {
            return res.status(404).json({ mensagem: 'Usu√°rio n√£o encontrado.' });
        }

        res.status(200).json({ mensagem: 'Usu√°rio atualizado com sucesso.' });
    } catch (error) {
        console.error('Erro ao atualizar usu√°rio:', error.message);
        res.status(500).json({ erro: 'Erro ao atualizar usu√°rio.' });
    }
};

// ‚ùå Deletar usu√°rio (DELETE /usuarios-bd/:id)
export const removerUsuario = async (req, res) => {
    const { id } = req.params;

    try {
        const removidos = await deletarUsuario(id);

        if (removidos === 0) {
            return res.status(404).json({ mensagem: 'Usu√°rio n√£o encontrado.' });
        }

        res.status(200).json({ mensagem: 'Usu√°rio removido com sucesso.' });
    } catch (error) {
        console.error('Erro ao remover usu√°rio:', error.message);
        res.status(500).json({ erro: 'Erro ao remover usu√°rio.' });
    }
};
