import http from 'http';




import { writeFile, readFile } from 'fs/promises';

// Caminho e conte√∫do do arquivo
const caminhoArquivo = 'meuarquivo.txt';
const conteudo = 'Ol√°! Este √© um conte√∫do escrito com Node.js.';

try {
    // 1. Criar o arquivo com conte√∫do
    await writeFile(caminhoArquivo, conteudo, 'utf8');
    console.log('Arquivo criado com sucesso.');

    // 2. Ler o conte√∫do do arquivo
    const leitura = await readFile(caminhoArquivo, 'utf8');
    console.log('Conte√∫do do arquivo:', leitura);

} catch (err) {
    console.error('Erro ao criar ou ler o arquivo:', err);
}

import { createReadStream } from 'fs';
import { createInterface } from 'readline';

const stream = createReadStream('texto.txt', { encoding: 'utf8' });

const rl = createInterface({
    input: stream,
    crlfDelay: Infinity
});

console.log('Lendo arquivo linha por linha...\n');

rl.on('line', (linha) => {
    console.log(`Linha: ${linha}`);
});

rl.on('close', () => {
    console.log('\nLeitura conclu√≠da.');
});


// 1. Criar uma string
const texto = 'Ol√°, mundo do Node.js!';

// 2. Converter a string para um Buffer (bin√°rio)
const buffer = Buffer.from(texto, 'utf8');

console.log('üì¶ Buffer (bin√°rio):', buffer);

// 3. Mostrar os valores hexadecimais dos bytes
console.log('üß¨ Bytes em hexadecimal:', buffer.toString('hex'));

// 4. Converter o Buffer de volta para string
const textoOriginal = buffer.toString('utf8');

console.log('üîÅ Texto original restaurado:', textoOriginal);


// index.js ATEN√á√ÉO! PRECISA TIRAR O "type": "module", NO PACKAGE.JSON para aceitar!

// const saudacao = require('./meuModulo');

// const mensagem = saudacao('Andrei');
// console.log(mensagem);




try {
    const data = await readFile('usuario.json', 'utf8');
    const usuario = JSON.parse(data);

    console.log('Dados do usu√°rio:');
    console.log(`Nome: ${usuario.nome}`);
    console.log(`Idade: ${usuario.idade}`);
    console.log(`Email: ${usuario.email}`);
} catch (err) {
    console.error('Erro ao ler o arquivo:', err);
}




const caminhoDoArquivo = 'arquivo_que_nao_existe.txt';

try {
    const data = await readFile(caminhoDoArquivo, 'utf8');
    console.log('Conte√∫do do arquivo:', data);
} catch (err) {
    console.error(`‚ùå Erro ao acessar o arquivo "${caminhoDoArquivo}":`);
    console.error(err.message); // Mostra a mensagem do erro
}


import { Duplex } from 'stream';

class MaiusculaDuplex extends Duplex {
    constructor(options) {
        super(options);
        this._dadosInternos = '';
    }

    // M√©todo de escrita: recebe dados de entrada
    _write(chunk, encoding, callback) {
        const texto = chunk.toString().toUpperCase();
        this._dadosInternos += texto;
        callback();
    }

    // M√©todo de leitura: envia os dados processados
    _read(size) {
        if (this._dadosInternos.length > 0) {
            this.push(this._dadosInternos);
            this._dadosInternos = '';
        } else {
            this.push(null); // sinaliza fim da leitura
        }
    }
}

// Usando o stream Duplex
const duplex = new MaiusculaDuplex();

duplex.write('Ol√°, mundo!');
duplex.end(); // sinaliza que terminou de escrever

// L√™ os dados processados
duplex.on('data', (chunk) => {
    console.log('Sa√≠da transformada:', chunk.toString());
});



import url from 'url';

const server = http.createServer((req, res) => {
    const { pathname } = url.parse(req.url, true);
    res.setHeader('Content-Type', 'text/plain; charset=utf-8');


    if (pathname === '/') {
        res.statusCode = 200;
        res.end('üè† P√°gina inicial - Bem-vindo ao Node.js!');
    } else if (pathname === '/sobre') {
        res.statusCode = 200;
        res.end('‚ÑπÔ∏è P√°gina Sobre - Este servidor responde rotas diferentes.');
    } else if (pathname === '/contato') {
        res.statusCode = 200;
        res.end('üìû P√°gina de Contato - Fale conosco!');
    } else {
        res.statusCode = 404;
        res.end('‚ùå 404 - P√°gina n√£o encontrada.');
    }
});

const PORT = 3000;
server.listen(PORT, () => {
    console.log(`Servidor rodando em http://localhost:${PORT}`);
});


//

function dividir(a, b) {
    return a / b;
}

const resultado = dividir(10, 0); // Divis√£o por zero (v√°lida, mas suspeita)

console.log('Resultado:', resultado);

debugger;
const usuario = JSON.parse('{"nome": "Andrei", "idade": 27}');

console.log(usuario);
